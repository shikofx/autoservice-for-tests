group "$applicationGroup"
version "$applicationVersion"

apply plugin: 'jsonschema2pojo'

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'org.jsonschema2pojo:jsonschema2pojo-gradle-plugin:1.0.1'
    }
}

dependencies {
    testImplementation('org.junit.jupiter:junit-jupiter:5.4.2')

    compile group: 'com.jayway.restassured',
            name: 'rest-assured',
            version: '2.9.0'
    compile group: 'commons-lang',
            name: 'commons-lang',
            version: '2.6'
    compile group: 'javax.validation',
            name: 'validation-api',
            version: '2.0.1.Final'
    compile group: 'com.google.guava',
            name: 'guava',
            version: '27.1-jre'
    // Required if generating JSR-303 annotations
    compile group: 'javax.validation',
            name: 'validation-api',
            version: '1.1.0.CR2'
    // Required if generating Jackson 2 annotations
    compile group: 'com.fasterxml.jackson.core',
            name: 'jackson-databind',
            version: '2.9.8'
    // Required if generating JodaTime data types
    compile group:'joda-time',
            name:'joda-time',
            version:'2.2'
}

//ext {
//    junitFoundation = configurations.compile.resolvedConfiguration.resolvedArtifacts.
//            find { it.name == 'junit-foundation' }
//}
//
//test.doFirst {
//    jvmArgs "-javaagent:${junitFoundation.file}"
//}

jsonSchema2Pojo {
    source = files("${sourceSets.main.output.resourcesDir}/json")
    targetDirectory = file("${project.projectDir}/src/main/java")
//    targetDirectory = file("${project.buildDir}/generated-sources/js2p")
    targetPackage = 'endpoints'
    // The characters that should be considered as word delimiters when creating Java Bean property
    // names from JSON property names. If blank or not set, JSON properties will be considered to
    // contain a single word when creating Java Bean property names.
//    propertyWordDelimiters = [] as char[]
    classNamePrefix = ""
    classNameSuffix = ""
    parcelable = false
    serializable = false
    generateBuilders = true
    usePrimitives = true
    useDoubleNumbers = true
    includeHashcodeAndEquals = true
    includeToString = true
    includeGetters = true
    includeSetters = false
    includeDynamicAccessors = false
    includeDynamicGetters = false
    includeDynamicSetters = true
    includeDynamicBuilders = false
    includeConstructors = false

    // The style of annotations to use in the generated Java types. Supported values:
    //  - jackson (alias of jackson2)
    //  - jackson2 (apply annotations from the Jackson 2.x library)
    //  - jackson1 (apply annotations from the Jackson 1.x library)
    //  - gson (apply annotations from the Gson library)
    //  - moshi1 (apply annotations from the Moshi 1.x library)
    //  - none (apply no annotations at all)
    annotationStyle = 'jackson'
//    customAnnotator = 'org.jsonschema2pojo.NoopAnnotator'

    // Whether to include JSR-303/349 annotations (for schema rules like minimum, maximum, etc) in
    // generated Java types. Schema rules and the annotation they produce:
    //  - maximum = @DecimalMax
    //  - minimum = @DecimalMin
    //  - minItems,maxItems = @Size
    //  - minLength,maxLength = @Size
    //  - pattern = @Pattern
    //  - required = @NotNull
    // Any Java fields which are an object or array of objects will be annotated with @Valid to
    // support validation of an entire document tree.
    includeJsr303Annotations = false
    // The type of input documents that will be read. Supported values:
    //  - jsonschema (schema documents, containing formal rules that describe the structure of JSON data)
    //  - json (documents that represent an example of the kind of JSON data that the generated Java types
    //          will be mapped to)
    //  - yamlschema (JSON schema documents, represented as YAML)
    //  - yaml (documents that represent an example of the kind of YAML (or JSON) data that the generated Java types
    //          will be mapped to)
    sourceType = 'json'
//    removeOldOutput = false
    outputEncoding = 'UTF-8'
    initializeCollections = true
    useJodaDates = false
    dateType = "java.time.LocalDate"
    dateTimeType = "java.time.LocalDateTime"
    formatDateTimes = true
    formatDates = true
    formatTimes = true
//    fileExtensions = [] as String[]
}